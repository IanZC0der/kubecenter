// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ian Zhang"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/configmap": {
            "get": {
                "description": "get configmap list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configmap"
                ],
                "summary": "get configmap list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the configmap list based on the namespace, not required",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the configmap list based on the keyword, not required",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "create/update a config map. the configurations of the configmap should be specified in the request\nbody. \n\nan example of request body:\n\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"name\": \"test\",\n  \"namespace\": \"test\",\n  \"labels\": [\n    {\n      \"key\": \"cm\",\n      \"value\": \"test\"\n    },\n    {\n      \"key\": \"cm2\",\n      \"value\": \"test2\"\n    }\n  ],\n  \"data\": [\n    {\n      \"key\": \"testKey\",\n      \"value\": \"testValue\"\n    },\n    {\n      \"key\": \"db_name\",\n      \"value\": \"testdb\"\n    },\n    {\n      \"key\": \"db_host\",\n      \"value\": \"127.0.0.1\"\n    }\n  ]\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configmap"
                ],
                "summary": "create/update configmap",
                "parameters": [
                    {
                        "description": "the configs of the config map",
                        "name": "configmap",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a configmap",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configmap"
                ],
                "summary": "delete a configmap",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the namespace of the configmap to be deleted",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the name of the configmap to be deleted",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/configmap/detail": {
            "get": {
                "description": "get configmap detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configmap"
                ],
                "summary": "get configmap detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the configmap detail based on the namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the configmap detail based on the name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/k8sservice": {
            "get": {
                "description": "get service list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "get service list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the service list based on the namespace, not required",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the service list based on the keyword, not required",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "create/update a k8s service. the request body should specify the detailed configs of \nthe service to be created/updated. labels of the pod should be specified in the selector\n\nan example:\n\n` + "`" + `` + "`" + `` + "`" + `json\n\n{\n  \"name\": \"test-svc\",\n  \"namespace\": \"test\",\n  \"labels\": [\n    {\n      \"key\": \"test\",\n      \"value\": \"svc\"\n    }\n  ],\n  \"selector\": [\n    {\n      \"key\": \"app\",\n      \"value\": \"test\"\n    }\n  ],\n  \"ports\": [\n    {\n      \"name\": \"http\",\n      \"targetPort\": 80,\n      \"port\": 80,\n      \"nodePort\": 0\n    }\n  ]\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "create/update service",
                "parameters": [
                    {
                        "description": "The configs of the service to be created/updated",
                        "name": "Service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "delete service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delete the service based on the namespace, required",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Delete the service based on the name, required",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/k8sservice/detail": {
            "get": {
                "description": "get service detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "get service detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the service info based on the namespace, required",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the service info based on the name, required",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/nodes": {
            "get": {
                "description": "get nodes list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "get nodes list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the nodes list based on the keyword, not required",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/nodes/detail": {
            "get": {
                "description": "get the detail of a node based on its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "get the detail of a node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the node",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/nodes/updatelabels": {
            "patch": {
                "description": "updates the labels of a node, request body should specify the node name and the labels. old labels will be deleted.\n\nan example of the request body:\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"name\": \"ubuntu-s-2vcpu-4gb-sfo3-02\",\n  \"labels\": [\n    {\n      \"key\": \"test\",\n      \"value\": \"app\"\n    }\n  ]\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "update the labels of a node",
                "parameters": [
                    {
                        "description": "new labels config",
                        "name": "labels",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/nodes/updatetaints": {
            "patch": {
                "description": "updates the taints of a node, request body should specify the node name and the taints. old taints will be deleted.\n\nan example of the request body:\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"name\": \"ubuntu-s-2vcpu-4gb-sfo3-02\",\n  \"taints\": [\n    {\n      \"key\": \"test2\",\n      \"value\": \"app2\",\n      \"effect\": \"NoSchedule\"\n    }\n  ]\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nodes"
                ],
                "summary": "update the taints of a node",
                "parameters": [
                    {
                        "description": "new taints config",
                        "name": "taints",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/pods": {
            "get": {
                "description": "get the pods list and name spaces",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "get the pods list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "updates a Kubernetes pod with detailed configurations, the old pod (if exists) will be deleted, an example of pod config:\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"base\": {\n    \"name\": \"test\",\n    \"namespace\": \"test\",\n    \"labels\": [\n      {\n        \"key\": \"app\",\n        \"value\": \"test\"\n      }\n    ],\n    \"restartPolicy\": \"Always\"\n  },\n  \"volumes\": [\n    {\n      \"name\": \"cache-volume\",\n      \"type\": \"emptyDir\"\n    }\n  ],\n  \"netWorking\": {\n    \"hostNetwork\": true,\n    \"hostName\": \"test\",\n    \"dnsPolicy\": \"Default\",\n    \"dnsConfig\": {\n      \"nameservers\": [\n        \"8.8.8.8\"\n      ]\n    },\n    \"hostAliases\": [\n      {\n        \"key\": \"64.23.172.139\",\n        \"value\": \"foo.bar,foo2.bar\"\n      }\n    ]\n  },\n  \"initContainers\": [\n    {\n      \"name\": \"busybox\",\n      \"image\": \"busybox\",\n      \"imagePullPolicy\": \"IfNotPresent\",\n      \"command\": [\n        \"echo\"\n      ],\n      \"args\": [\n        \"hello world\"\n      ]\n    }\n  ],\n  \"containers\": [\n    {\n      \"name\": \"nginx\",\n      \"image\": \"nginx\",\n      \"imagePullPolicy\": \"IfNotPresent\",\n      \"privileged\": true,\n      \"tty\": true,\n      \"workingDir\": \"/test\",\n      \"envs\": [\n        {\n          \"key\": \"foo\",\n          \"value\": \"bar\"\n        }\n      ],\n      \"startupProbe\": {\n        \"enable\": true,\n        \"type\": \"http\",\n        \"httpGet\": {\n          \"scheme\": \"HTTP\",\n          \"host\": \"\",\n          \"path\": \"/\",\n          \"port\": 80,\n          \"httpHeaders\": [\n            {\n              \"key\": \"foo\",\n              \"value\": \"bar\"\n            }\n          ]\n        },\n        \"initialDelaySeconds\": 10,\n        \"periodSeconds\": 5,\n        \"timeoutSeconds\": 10,\n        \"successThreshold\": 1,\n        \"failureThreshold\": 10\n      },\n      \"livenessProbe\": {\n        \"enable\": true,\n        \"type\": \"tcp\",\n        \"tcpSocket\": {\n          \"host\": \"\",\n          \"port\": 80\n        },\n        \"initialDelaySeconds\": 10,\n        \"periodSeconds\": 5,\n        \"timeoutSeconds\": 10,\n        \"successThreshold\": 1,\n        \"failureThreshold\": 10\n      },\n      \"readinessProbe\": {\n        \"enable\": true,\n        \"type\": \"exec\",\n        \"exec\": {\n          \"command\": [\n            \"echo\",\n            \"helloworld\"\n          ]\n        },\n        \"initialDelaySeconds\": 10,\n        \"periodSeconds\": 5,\n        \"timeoutSeconds\": 10,\n        \"successThreshold\": 1,\n        \"failureThreshold\": 10\n      },\n      \"resources\": {\n        \"enable\": true,\n        \"memRequest\": 128,\n        \"memLimit\": 128,\n        \"cpuRequest\": 100,\n        \"cpuLimit\": 100\n      },\n      \"volumeMounts\": [\n        {\n          \"mountName\": \"cache-volume\",\n          \"mountPath\": \"/test\",\n          \"readyOnly\": false\n        }\n      ]\n    }\n  ]\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "update a Kubernetes pod",
                "parameters": [
                    {
                        "description": "Pod Configuration",
                        "name": "pod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "creates a new Kubernetes pod with detailed configurations, configuring scheduling is also supported.\n\ntwo types of scheduling are supported: \n1. node name\n2. affinity\n\nan example of pod config:\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"base\": {\n    \"name\": \"test\",\n    \"namespace\": \"test\",\n    \"labels\": [\n      {\n        \"key\": \"app\",\n        \"value\": \"test\"\n      }\n    ],\n    \"restartPolicy\": \"Always\"\n  },\n  \"nodeScheduling\": {\n    \"type\": \"nodeAffinity\",\n    \"nodeAffinity\": [\n      {\n        \"key\": \"test\",\n        \"value\": \"app\",\n        \"operator\": \"In\"\n\n      }\n    ]\n  },\n  \"volumes\": [\n    {\n      \"name\": \"cache-volume\",\n      \"type\": \"emptyDir\"\n    }\n  ],\n  \"netWorking\": {\n    \"hostNetwork\": true,\n    \"hostName\": \"test\",\n    \"dnsPolicy\": \"Default\",\n    \"dnsConfig\": {\n      \"nameservers\": [\n        \"8.8.8.8\"\n      ]\n    },\n    \"hostAliases\": [\n      {\n        \"key\": \"64.23.172.139\",\n        \"value\": \"foo.bar,foo2.bar\"\n      }\n    ]\n  },\n  \"initContainers\": [\n    {\n      \"name\": \"busybox\",\n      \"image\": \"busybox\",\n      \"imagePullPolicy\": \"IfNotPresent\",\n      \"command\": [\n        \"echo\"\n      ],\n      \"args\": [\n        \"hello world\"\n      ]\n    }\n  ],\n  \"containers\": [\n    {\n      \"name\": \"nginx\",\n      \"image\": \"nginx\",\n      \"imagePullPolicy\": \"IfNotPresent\",\n      \"privileged\": true,\n      \"tty\": true,\n      \"workingDir\": \"/test\",\n      \"envs\": [\n        {\n          \"name\": \"foo\",\n          \"value\": \"bar\"\n        },\n        {\n          \"name\": \"new_db_name\",\n          \"type\": \"configMap\",\n          \"value\": \"db_name\",\n          \"refName\": \"testcm\"\n        }\n      ],\n      \"envsFrom\": [\n        {\n          \"name\": \"testcm\",\n          \"refType\": \"configMap\",\n          \"prefix\": \"selfdefined_\"\n        }\n      ],\n      \"startupProbe\": {\n        \"enable\": true,\n        \"type\": \"http\",\n        \"httpGet\": {\n          \"scheme\": \"HTTP\",\n          \"host\": \"\",\n          \"path\": \"/\",\n          \"port\": 80,\n          \"httpHeaders\": [\n            {\n              \"key\": \"foo\",\n              \"value\": \"bar\"\n            }\n          ]\n        },\n        \"initialDelaySeconds\": 10,\n        \"periodSeconds\": 5,\n        \"timeoutSeconds\": 10,\n        \"successThreshold\": 1,\n        \"failureThreshold\": 10\n      },\n      \"livenessProbe\": {\n        \"enable\": true,\n        \"type\": \"tcp\",\n        \"tcpSocket\": {\n          \"host\": \"\",\n          \"port\": 80\n        },\n        \"initialDelaySeconds\": 10,\n        \"periodSeconds\": 5,\n        \"timeoutSeconds\": 10,\n        \"successThreshold\": 1,\n        \"failureThreshold\": 10\n      },\n      \"readinessProbe\": {\n        \"enable\": true,\n        \"type\": \"exec\",\n        \"exec\": {\n          \"command\": [\n            \"echo\",\n            \"helloworld\"\n          ]\n        },\n        \"initialDelaySeconds\": 10,\n        \"periodSeconds\": 5,\n        \"timeoutSeconds\": 10,\n        \"successThreshold\": 1,\n        \"failureThreshold\": 10\n      },\n      \"resources\": {\n        \"enable\": true,\n        \"memRequest\": 128,\n        \"memLimit\": 128,\n        \"cpuRequest\": 100,\n        \"cpuLimit\": 100\n      },\n      \"volumeMounts\": [\n        {\n          \"mountName\": \"cache-volume\",\n          \"mountPath\": \"/test\",\n          \"readyOnly\": false\n        }\n      ]\n    }\n  ]\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "create a Kubernetes pod",
                "parameters": [
                    {
                        "description": "Pod Configuration",
                        "name": "pod",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a pod based on namespace and name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "delete a pod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name of the pod",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/pods/namespacelist": {
            "get": {
                "description": "get the namespace list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "get the namespace list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/pods/nodepods/{nodename}": {
            "get": {
                "description": "get the pods list within a node, with optional keyword",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "get the pods list within a node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the node",
                        "name": "nodename",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter pods by keyword",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/pods/poddetail/{namespace}": {
            "get": {
                "description": "get a pod detail under a namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "get a pod detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name of the pod",
                        "name": "keyword",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/pods/{namespace}": {
            "get": {
                "description": "get the pods list given a namespace, with optional keyword",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pods"
                ],
                "summary": "get the pods list under a namespace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter pods by keyword",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter pods by nodename",
                        "name": "nodename",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/pv": {
            "get": {
                "description": "get persistent volume list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persistent volume"
                ],
                "summary": "get persistent volume list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the volume list based on the keyword, not required",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "create a persistent volume, the request body should specify the detailed configs of \nthe persistent volume.\n\n\nan example:\n\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"name\": \"test\",\n  \"namespace\": \"test\",\n  \"labels\": [\n    {\n      \"key\": \"pv\",\n      \"value\": \"test-pv\"\n    }\n  ],\n  \"capacity\": 100,\n  \"accessModes\": [\n    \"ReadWriteOnce\"\n  ],\n  \"reClaimPolicy\": \"Recycle\",\n  \"volumeSource\": {\n    \"type\": \"nfs\",\n    \"nfsVolumeSource\": {\n      \"nfsPath\": \"\",\n      \"nfsServer\": \"\",\n      \"nfsReadyOnly\": false\n    }\n  }\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persistent volume"
                ],
                "summary": "create persistent volume",
                "parameters": [
                    {
                        "description": "The configs of the persistent volume",
                        "name": "PersistentVolume",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete persistent volume",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persistent volume"
                ],
                "summary": "delete persistent volume",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delete the volume based on the name, required",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/pv/pvc": {
            "get": {
                "description": "get persistent volume claim list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persistent volume"
                ],
                "summary": "get persistent volume claim list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the volume claim list based on the namespace, not required",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the volume claim list based on the name, not required",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "create a persistent volume claim, the request body should specify the detailed configs of \nthe persistent volume claim. the requested capacity should be more than the target persistent volume capacity\n\n\nan example:\n\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"name\": \"test\",\n  \"namespace\": \"test\",\n  \"labels\": [\n    {\n      \"key\": \"pvc\",\n      \"value\": \"pvc01\"\n    }\n  ],\n  \"selector\": [\n    {\n      \"key\": \"pv\",\n      \"value\": \"test-pv\"\n    }\n  ],\n  \"accessModes\": [\n    \"ReadWriteOnce\"\n  ],\n  \"capacity\": 100\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persistent volume"
                ],
                "summary": "create persistent volume claim",
                "parameters": [
                    {
                        "description": "The configs of the persistent volume claim",
                        "name": "PersistentVolumeClaim",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete persistent volume claim",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persistent volume"
                ],
                "summary": "delete persistent volume claim",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delete the volume claim based on the namespace, required",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Delete the volume claim based on the name, required",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/pv/sc": {
            "get": {
                "description": "get storage class list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persistent volume"
                ],
                "summary": "get storage class list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the storage class list based on the keyword, not required",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "create a storage class, the request body should specify the detailed configs of\nthe storage class to be created. note that this project use nfs as the default provisioner. \nnfs supports two types of reclaim policy: Retain and Delete\n\n\nan example:\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"name\": \"test\",\n  \"labels\": [],\n  \"provisioner\": \"cluster.local/nfs-subdir-external-provisioner\",\n  \"mountOptions\": [\"nfsvers=4\"],\n  \"volumeBindingMode\": \"Immediate\",\n  \"reclaimPolicy\": \"Delete\",\n  \"allowVolumeExpansion\": false,\n  \"parameters\": []\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persistent volume"
                ],
                "summary": "create storage class",
                "parameters": [
                    {
                        "description": "The configs of the storage class to be created",
                        "name": "StorageClass",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a storage class",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persistent volume"
                ],
                "summary": "delete a storage class",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delete the storage class based on the name, required",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/rbac/role": {
            "get": {
                "description": "get role list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "get role list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the role list based on the namespace, not required",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the role list based on the keyword, not required",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "create a role. the configurations of the role should be specified in the request\nbody. if the namespace is empty, a cluster role will be created\n\nan example of request body:\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"name\": \"test\",\n  \"namespace\": \"test\",\n  \"labels\": [\n    {\n      \"key\": \"role\",\n      \"value\": \"test\"\n    }\n  ],\n  \"rules\": [\n    {\n      \"apiGroups\": [\"\"],\n      \"verbs\": [\"get\",\"list\"],\n      \"resources\": [\"pods\"],\n      \"resourceNames\": [\"web\"],\n      \"nonResourceURLs\": []\n    }\n  ]\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "create role",
                "parameters": [
                    {
                        "description": "the configs of the role",
                        "name": "ServiceAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "delete a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the namespace of the role to be deleted",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the name of the role to be deleted",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/rbac/role/detail": {
            "get": {
                "description": "get role detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "get role detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the role detail based on the namespace",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the role detail based on the name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/rbac/serviceaccount": {
            "get": {
                "description": "get service account list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "get service account list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the service account list based on the namespace, not required",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the service account list based on the keyword, not required",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "create a service account. the configurations of the secret should be specified in the request\nbody.\n\nan example of request body:\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"name\": \"test\",\n  \"namespace\": \"test\",\n  \"labels\": [\n    {\n      \"key\": \"sa\",\n      \"value\": \"test\"\n    }\n  ]\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "create service account",
                "parameters": [
                    {
                        "description": "the configs of the service account",
                        "name": "ServiceAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a service account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rbac"
                ],
                "summary": "delete a service account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the namespace of the service account to be deleted",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the name of the service account to be deleted",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/secrets": {
            "get": {
                "description": "get secret list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secret"
                ],
                "summary": "get secret list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the secret list based on the namespace, not required",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the secret list based on the keyword, not required",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "create/update a secret. the configurations of the secret should be specified in the request\nbody.\n\nan example of request body:\n\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"name\": \"test\",\n  \"namespace\": \"test\",\n  \"type\": \"Opaque\",\n  \"labels\": [\n    {\n      \"key\": \"cm\",\n      \"value\": \"test\"\n    }\n  ],\n  \"data\": [\n    {\n      \"key\": \"testKey\",\n      \"value\": \"dGVzdFZhbHVl\"\n    }\n  ]\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secret"
                ],
                "summary": "create/update secret",
                "parameters": [
                    {
                        "description": "the configs of the secret",
                        "name": "secret",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a secret",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secret"
                ],
                "summary": "delete a secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the namespace of the secret to be deleted",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the name of the secret to be deleted",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/secrets/detail": {
            "get": {
                "description": "get secret detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "secret"
                ],
                "summary": "get secret detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the secret detail based on the namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the secret detail based on the name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/workload/statefulset": {
            "get": {
                "description": "get statefulSet list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workload"
                ],
                "summary": "get statefulSet list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the statefulSet list based on the namespace, not required",
                        "name": "namespace",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the statefulSet list based on the keyword, not required",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "create/update a statefulSet. the configs of the statefulSet should be specified \nin the request body. use the createService api to create a service first.\n\nan example:\n` + "`" + `` + "`" + `` + "`" + `json\n\n{\n    \"name\": \"nginx-statefulset\",\n    \"namespace\": \"test\",\n    \"labels\": [\n      {\n        \"key\": \"app\",\n        \"value\": \"nginx-statefulset\"\n      }\n    ],\n    \"selector\": [\n      {\n        \"key\": \"app\",\n        \"value\": \"nginx-statefulset-tp\"\n      }\n    ],\n    \"replicas\": 2,\n    \"volumeClaimTemplates\": [\n      {\n        \"name\": \"www\",\n        \"labels\": [\n          {\n            \"key\": \"pvc\",\n            \"value\": \"pvc01\"\n          }\n        ],\n        \"accessModes\": [\n          \"ReadWriteOnce\"\n        ],\n        \"capacity\": 100,\n        \"storageClassName\": \"nfs-client\"\n      }\n    ],\n  \"template\": {\n    \"netWorking\": {\n      \"hostNetwork\": true,\n      \"hostName\": \"test\",\n      \"dnsPolicy\": \"Default\",\n      \"dnsConfig\": {\n        \"nameservers\": [\n          \"8.8.8.8\"\n        ]\n      },\n      \"hostAliases\": [\n        {\n          \"key\": \"64.23.172.139\",\n          \"value\": \"foo.bar,foo2.bar\"\n        }\n      ]\n    },\n    \"base\": {\n      \"labels\": [\n        {\n          \"key\": \"app\",\n          \"value\": \"nginx-statefulset-tp\"\n        }\n      ],\n      \"restartPolicy\": \"Always\"\n    },\n    \"initContainers\": [\n      {\n        \"name\": \"busybox-init\",\n        \"image\": \"busybox\",\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"command\": [\n          \"echo\"\n        ],\n        \"args\": [\n          \"hello world\"\n        ]\n      }\n    ],\n    \"containers\": [\n      {\n        \"name\": \"nginx\",\n        \"image\": \"nginx\",\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"livenessProbe\": {\n          \"enable\": true,\n          \"type\": \"tcp\",\n          \"tcpSocket\": {\n            \"host\": \"\",\n            \"port\": 80\n          },\n          \"initialDelaySeconds\": 10,\n          \"periodSeconds\": 5,\n          \"timeoutSeconds\": 10,\n          \"successThreshold\": 1,\n          \"failureThreshold\": 10\n        },\n        \"envs\": [\n          {\n            \"name\": \"foo\",\n            \"value\": \"bar\"\n          }\n        ],\n        \"volumeMounts\": [\n          {\n            \"mountName\": \"www\",\n            \"mountPath\": \"/usr/share/nginx/html\",\n            \"readOnly\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"busybox\",\n        \"image\": \"busybox\",\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"tty\": true\n      }\n    ]\n  }\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workload"
                ],
                "summary": "create/update statefulSet",
                "parameters": [
                    {
                        "description": "the configs of the statefulSet",
                        "name": "statefulSet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a statefulSet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workload"
                ],
                "summary": "delete a statefulSet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the namespace of the statefulSet to be deleted",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the name of the statefulSet to be deleted",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/workload/statefulset/detail": {
            "get": {
                "description": "get statefulset detail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workload"
                ],
                "summary": "get statefulset detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Retrieve the statefulset detail based on the namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Retrieve the statefulset detail based on the name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "response.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "msg": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/kubecenter",
	Schemes:          []string{},
	Title:            "Kubecenter API doc",
	Description:      "This webapp is for managing the k8s resources",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
