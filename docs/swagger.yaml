basePath: /api/kubecenter
definitions:
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      msg:
        type: string
    type: object
info:
  contact:
    name: Ian Zhang
  description: This webapp is for managing the k8s resources
  title: Kubecenter API doc
  version: "1.0"
paths:
  /nodes:
    get:
      consumes:
      - application/json
      description: get nodes list
      parameters:
      - description: Retrieve the nodes list based on the keyword, not required
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get nodes list
      tags:
      - nodes
  /nodes/detail:
    get:
      consumes:
      - application/json
      description: get the detail of a node based on its name
      parameters:
      - description: name of the node
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get the detail of a node
      tags:
      - nodes
  /nodes/updatelabels:
    patch:
      consumes:
      - application/json
      description: |-
        updates the labels of a node, request body should specify the node name and the labels. old labels will be deleted.

        an example of the request body:

        ```json
        {
          "name": "ubuntu-s-2vcpu-4gb-sfo3-02",
          "labels": [
            {
              "key": "test",
              "value": "app"
            }
          ]
        }
        ```
      parameters:
      - description: new labels config
        in: body
        name: labels
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: update the labels of a node
      tags:
      - nodes
  /nodes/updatetaints:
    patch:
      consumes:
      - application/json
      description: |-
        updates the taints of a node, request body should specify the node name and the taints. old taints will be deleted.

        an example of the request body:

        ```json
        {
          "name": "ubuntu-s-2vcpu-4gb-sfo3-02",
          "taints": [
            {
              "key": "test2",
              "value": "app2",
              "effect": "NoSchedule"
            }
          ]
        }
        ```
      parameters:
      - description: new taints config
        in: body
        name: taints
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: update the taints of a node
      tags:
      - nodes
  /pods:
    delete:
      consumes:
      - application/json
      description: delete a pod based on namespace and name
      parameters:
      - description: Namespace
        in: query
        name: namespace
        required: true
        type: string
      - description: The name of the pod
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: delete a pod
      tags:
      - pods
    get:
      consumes:
      - application/json
      description: get the pods list and name spaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get the pods list
      tags:
      - pods
    post:
      consumes:
      - application/json
      description: |-
        creates a new Kubernetes pod with detailed configurations, an example of pod config:

        ```json
        {
          "base": {
            "name": "test",
            "namespace": "test",
            "labels": [
              {
                "key": "app",
                "value": "test"
              }
            ],
            "restartPolicy": "Always"
          },
          "volumes": [
            {
              "name": "cache-volume",
              "type": "emptyDir"
            }
          ],
          "netWorking": {
            "hostNetwork": true,
            "hostName": "test",
            "dnsPolicy": "Default",
            "dnsConfig": {
              "nameservers": [
                "8.8.8.8"
              ]
            },
            "hostAliases": [
              {
                "key": "64.23.172.139",
                "value": "foo.bar,foo2.bar"
              }
            ]
          },
          "initContainers": [
            {
              "name": "busybox",
              "image": "busybox",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "echo"
              ],
              "args": [
                "hello world"
              ]
            }
          ],
          "containers": [
            {
              "name": "nginx",
              "image": "nginx",
              "imagePullPolicy": "IfNotPresent",
              "privileged": true,
              "tty": true,
              "workingDir": "/test",
              "envs": [
                {
                  "key": "foo",
                  "value": "bar"
                }
              ],
              "startupProbe": {
                "enable": true,
                "type": "http",
                "httpGet": {
                  "scheme": "HTTP",
                  "host": "",
                  "path": "/",
                  "port": 80,
                  "httpHeaders": [
                    {
                      "key": "foo",
                      "value": "bar"
                    }
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5,
                "timeoutSeconds": 10,
                "successThreshold": 1,
                "failureThreshold": 10
              },
              "livenessProbe": {
                "enable": true,
                "type": "tcp",
                "tcpSocket": {
                  "host": "",
                  "port": 80
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5,
                "timeoutSeconds": 10,
                "successThreshold": 1,
                "failureThreshold": 10
              },
              "readinessProbe": {
                "enable": true,
                "type": "exec",
                "exec": {
                  "command": [
                    "echo",
                    "helloworld"
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5,
                "timeoutSeconds": 10,
                "successThreshold": 1,
                "failureThreshold": 10
              },
              "resources": {
                "enable": true,
                "memRequest": 128,
                "memLimit": 128,
                "cpuRequest": 100,
                "cpuLimit": 100
              },
              "volumeMounts": [
                {
                  "mountName": "cache-volume",
                  "mountPath": "/test",
                  "readyOnly": false
                }
              ]
            }
          ]
        }
        ```
      parameters:
      - description: Pod Configuration
        in: body
        name: pod
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create a Kubernetes pod
      tags:
      - pods
    put:
      consumes:
      - application/json
      description: |-
        updates a Kubernetes pod with detailed configurations, the old pod (if exists) will be deleted, an example of pod config:

        ```json
        {
          "base": {
            "name": "test",
            "namespace": "test",
            "labels": [
              {
                "key": "app",
                "value": "test"
              }
            ],
            "restartPolicy": "Always"
          },
          "volumes": [
            {
              "name": "cache-volume",
              "type": "emptyDir"
            }
          ],
          "netWorking": {
            "hostNetwork": true,
            "hostName": "test",
            "dnsPolicy": "Default",
            "dnsConfig": {
              "nameservers": [
                "8.8.8.8"
              ]
            },
            "hostAliases": [
              {
                "key": "64.23.172.139",
                "value": "foo.bar,foo2.bar"
              }
            ]
          },
          "initContainers": [
            {
              "name": "busybox",
              "image": "busybox",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "echo"
              ],
              "args": [
                "hello world"
              ]
            }
          ],
          "containers": [
            {
              "name": "nginx",
              "image": "nginx",
              "imagePullPolicy": "IfNotPresent",
              "privileged": true,
              "tty": true,
              "workingDir": "/test",
              "envs": [
                {
                  "key": "foo",
                  "value": "bar"
                }
              ],
              "startupProbe": {
                "enable": true,
                "type": "http",
                "httpGet": {
                  "scheme": "HTTP",
                  "host": "",
                  "path": "/",
                  "port": 80,
                  "httpHeaders": [
                    {
                      "key": "foo",
                      "value": "bar"
                    }
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5,
                "timeoutSeconds": 10,
                "successThreshold": 1,
                "failureThreshold": 10
              },
              "livenessProbe": {
                "enable": true,
                "type": "tcp",
                "tcpSocket": {
                  "host": "",
                  "port": 80
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5,
                "timeoutSeconds": 10,
                "successThreshold": 1,
                "failureThreshold": 10
              },
              "readinessProbe": {
                "enable": true,
                "type": "exec",
                "exec": {
                  "command": [
                    "echo",
                    "helloworld"
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5,
                "timeoutSeconds": 10,
                "successThreshold": 1,
                "failureThreshold": 10
              },
              "resources": {
                "enable": true,
                "memRequest": 128,
                "memLimit": 128,
                "cpuRequest": 100,
                "cpuLimit": 100
              },
              "volumeMounts": [
                {
                  "mountName": "cache-volume",
                  "mountPath": "/test",
                  "readyOnly": false
                }
              ]
            }
          ]
        }
        ```
      parameters:
      - description: Pod Configuration
        in: body
        name: pod
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: update a Kubernetes pod
      tags:
      - pods
  /pods/{namespace}:
    get:
      consumes:
      - application/json
      description: get the pods list given a namespace, with optional keyword
      parameters:
      - description: Namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: Filter pods by keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get the pods list under a namespace
      tags:
      - pods
  /pods/namespacelist:
    get:
      consumes:
      - application/json
      description: get the namespace list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get the namespace list
      tags:
      - pods
  /pods/poddetail/{namespace}:
    get:
      consumes:
      - application/json
      description: get a pod detail under a namespace
      parameters:
      - description: Namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: The name of the pod
        in: query
        name: keyword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get a pod detail
      tags:
      - pods
swagger: "2.0"
