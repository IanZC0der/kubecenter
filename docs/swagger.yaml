basePath: /api/kubecenter
definitions:
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      msg:
        type: string
    type: object
info:
  contact:
    name: Ian Zhang
  description: This webapp is for managing the k8s resources
  title: Kubecenter API doc
  version: "1.0"
paths:
  /configmap:
    delete:
      consumes:
      - application/json
      description: delete a configmap
      parameters:
      - description: the namespace of the configmap to be deleted
        in: query
        name: namespace
        required: true
        type: string
      - description: the name of the configmap to be deleted
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: delete a configmap
      tags:
      - configmap
    get:
      consumes:
      - application/json
      description: get configmap list
      parameters:
      - description: Retrieve the configmap list based on the namespace, not required
        in: query
        name: namespace
        type: string
      - description: Retrieve the configmap list based on the keyword, not required
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get configmap list
      tags:
      - configmap
    post:
      consumes:
      - application/json
      description: "create/update a config map. the configurations of the configmap
        should be specified in the request\nbody. \n\nan example of request body:\n\n\n```json\n{\n
        \ \"name\": \"test\",\n  \"namespace\": \"test\",\n  \"labels\": [\n    {\n
        \     \"key\": \"cm\",\n      \"value\": \"test\"\n    },\n    {\n      \"key\":
        \"cm2\",\n      \"value\": \"test2\"\n    }\n  ],\n  \"data\": [\n    {\n
        \     \"key\": \"testKey\",\n      \"value\": \"testValue\"\n    },\n    {\n
        \     \"key\": \"db_name\",\n      \"value\": \"testdb\"\n    },\n    {\n
        \     \"key\": \"db_host\",\n      \"value\": \"127.0.0.1\"\n    }\n  ]\n}\n```"
      parameters:
      - description: the configs of the config map
        in: body
        name: configmap
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create/update configmap
      tags:
      - configmap
  /configmap/detail:
    get:
      consumes:
      - application/json
      description: get configmap detail
      parameters:
      - description: Retrieve the configmap detail based on the namespace
        in: query
        name: namespace
        required: true
        type: string
      - description: Retrieve the configmap detail based on the name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get configmap detail
      tags:
      - configmap
  /k8sservice:
    delete:
      consumes:
      - application/json
      description: delete service
      parameters:
      - description: Delete the service based on the namespace, required
        in: query
        name: namespace
        required: true
        type: string
      - description: Delete the service based on the name, required
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: delete service
      tags:
      - service
    get:
      consumes:
      - application/json
      description: get service list
      parameters:
      - description: Retrieve the service list based on the namespace, not required
        in: query
        name: namespace
        type: string
      - description: Retrieve the service list based on the keyword, not required
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get service list
      tags:
      - service
    post:
      consumes:
      - application/json
      description: "create/update a k8s service. the request body should specify the
        detailed configs of \nthe service to be created/updated. labels of the pod
        should be specified in the selector\n\nan example:\n\n```json\n\n{\n  \"name\":
        \"test-svc\",\n  \"namespace\": \"test\",\n  \"labels\": [\n    {\n      \"key\":
        \"test\",\n      \"value\": \"svc\"\n    }\n  ],\n  \"selector\": [\n    {\n
        \     \"key\": \"app\",\n      \"value\": \"test\"\n    }\n  ],\n  \"ports\":
        [\n    {\n      \"name\": \"http\",\n      \"targetPort\": 80,\n      \"port\":
        80,\n      \"nodePort\": 0\n    }\n  ]\n}\n```"
      parameters:
      - description: The configs of the service to be created/updated
        in: body
        name: Service
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create/update service
      tags:
      - service
  /k8sservice/detail:
    get:
      consumes:
      - application/json
      description: get service detail
      parameters:
      - description: Retrieve the service info based on the namespace, required
        in: query
        name: namespace
        required: true
        type: string
      - description: Retrieve the service info based on the name, required
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get service detail
      tags:
      - service
  /nodes:
    get:
      consumes:
      - application/json
      description: get nodes list
      parameters:
      - description: Retrieve the nodes list based on the keyword, not required
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get nodes list
      tags:
      - nodes
  /nodes/detail:
    get:
      consumes:
      - application/json
      description: get the detail of a node based on its name
      parameters:
      - description: name of the node
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get the detail of a node
      tags:
      - nodes
  /nodes/updatelabels:
    patch:
      consumes:
      - application/json
      description: |-
        updates the labels of a node, request body should specify the node name and the labels. old labels will be deleted.

        an example of the request body:

        ```json
        {
          "name": "ubuntu-s-2vcpu-4gb-sfo3-02",
          "labels": [
            {
              "key": "test",
              "value": "app"
            }
          ]
        }
        ```
      parameters:
      - description: new labels config
        in: body
        name: labels
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: update the labels of a node
      tags:
      - nodes
  /nodes/updatetaints:
    patch:
      consumes:
      - application/json
      description: |-
        updates the taints of a node, request body should specify the node name and the taints. old taints will be deleted.

        an example of the request body:

        ```json
        {
          "name": "ubuntu-s-2vcpu-4gb-sfo3-02",
          "taints": [
            {
              "key": "test2",
              "value": "app2",
              "effect": "NoSchedule"
            }
          ]
        }
        ```
      parameters:
      - description: new taints config
        in: body
        name: taints
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: update the taints of a node
      tags:
      - nodes
  /pods:
    delete:
      consumes:
      - application/json
      description: delete a pod based on namespace and name
      parameters:
      - description: Namespace
        in: query
        name: namespace
        required: true
        type: string
      - description: The name of the pod
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: delete a pod
      tags:
      - pods
    get:
      consumes:
      - application/json
      description: get the pods list and name spaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get the pods list
      tags:
      - pods
    post:
      consumes:
      - application/json
      description: "creates a new Kubernetes pod with detailed configurations, configuring
        scheduling is also supported.\n\ntwo types of scheduling are supported: \n1.
        node name\n2. affinity\n\nan example of pod config:\n\n```json\n{\n  \"base\":
        {\n    \"name\": \"test\",\n    \"namespace\": \"test\",\n    \"labels\":
        [\n      {\n        \"key\": \"app\",\n        \"value\": \"test\"\n      }\n
        \   ],\n    \"restartPolicy\": \"Always\"\n  },\n  \"nodeScheduling\": {\n
        \   \"type\": \"nodeAffinity\",\n    \"nodeAffinity\": [\n      {\n        \"key\":
        \"test\",\n        \"value\": \"app\",\n        \"operator\": \"In\"\n\n      }\n
        \   ]\n  },\n  \"volumes\": [\n    {\n      \"name\": \"cache-volume\",\n
        \     \"type\": \"emptyDir\"\n    }\n  ],\n  \"netWorking\": {\n    \"hostNetwork\":
        true,\n    \"hostName\": \"test\",\n    \"dnsPolicy\": \"Default\",\n    \"dnsConfig\":
        {\n      \"nameservers\": [\n        \"8.8.8.8\"\n      ]\n    },\n    \"hostAliases\":
        [\n      {\n        \"key\": \"64.23.172.139\",\n        \"value\": \"foo.bar,foo2.bar\"\n
        \     }\n    ]\n  },\n  \"initContainers\": [\n    {\n      \"name\": \"busybox\",\n
        \     \"image\": \"busybox\",\n      \"imagePullPolicy\": \"IfNotPresent\",\n
        \     \"command\": [\n        \"echo\"\n      ],\n      \"args\": [\n        \"hello
        world\"\n      ]\n    }\n  ],\n  \"containers\": [\n    {\n      \"name\":
        \"nginx\",\n      \"image\": \"nginx\",\n      \"imagePullPolicy\": \"IfNotPresent\",\n
        \     \"privileged\": true,\n      \"tty\": true,\n      \"workingDir\": \"/test\",\n
        \     \"envs\": [\n        {\n          \"name\": \"foo\",\n          \"value\":
        \"bar\"\n        },\n        {\n          \"name\": \"new_db_name\",\n          \"type\":
        \"configMap\",\n          \"value\": \"db_name\",\n          \"refName\":
        \"testcm\"\n        }\n      ],\n      \"envsFrom\": [\n        {\n          \"name\":
        \"testcm\",\n          \"refType\": \"configMap\",\n          \"prefix\":
        \"selfdefined_\"\n        }\n      ],\n      \"startupProbe\": {\n        \"enable\":
        true,\n        \"type\": \"http\",\n        \"httpGet\": {\n          \"scheme\":
        \"HTTP\",\n          \"host\": \"\",\n          \"path\": \"/\",\n          \"port\":
        80,\n          \"httpHeaders\": [\n            {\n              \"key\": \"foo\",\n
        \             \"value\": \"bar\"\n            }\n          ]\n        },\n
        \       \"initialDelaySeconds\": 10,\n        \"periodSeconds\": 5,\n        \"timeoutSeconds\":
        10,\n        \"successThreshold\": 1,\n        \"failureThreshold\": 10\n
        \     },\n      \"livenessProbe\": {\n        \"enable\": true,\n        \"type\":
        \"tcp\",\n        \"tcpSocket\": {\n          \"host\": \"\",\n          \"port\":
        80\n        },\n        \"initialDelaySeconds\": 10,\n        \"periodSeconds\":
        5,\n        \"timeoutSeconds\": 10,\n        \"successThreshold\": 1,\n        \"failureThreshold\":
        10\n      },\n      \"readinessProbe\": {\n        \"enable\": true,\n        \"type\":
        \"exec\",\n        \"exec\": {\n          \"command\": [\n            \"echo\",\n
        \           \"helloworld\"\n          ]\n        },\n        \"initialDelaySeconds\":
        10,\n        \"periodSeconds\": 5,\n        \"timeoutSeconds\": 10,\n        \"successThreshold\":
        1,\n        \"failureThreshold\": 10\n      },\n      \"resources\": {\n        \"enable\":
        true,\n        \"memRequest\": 128,\n        \"memLimit\": 128,\n        \"cpuRequest\":
        100,\n        \"cpuLimit\": 100\n      },\n      \"volumeMounts\": [\n        {\n
        \         \"mountName\": \"cache-volume\",\n          \"mountPath\": \"/test\",\n
        \         \"readyOnly\": false\n        }\n      ]\n    }\n  ]\n}\n```"
      parameters:
      - description: Pod Configuration
        in: body
        name: pod
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create a Kubernetes pod
      tags:
      - pods
    put:
      consumes:
      - application/json
      description: |-
        updates a Kubernetes pod with detailed configurations, the old pod (if exists) will be deleted, an example of pod config:

        ```json
        {
          "base": {
            "name": "test",
            "namespace": "test",
            "labels": [
              {
                "key": "app",
                "value": "test"
              }
            ],
            "restartPolicy": "Always"
          },
          "volumes": [
            {
              "name": "cache-volume",
              "type": "emptyDir"
            }
          ],
          "netWorking": {
            "hostNetwork": true,
            "hostName": "test",
            "dnsPolicy": "Default",
            "dnsConfig": {
              "nameservers": [
                "8.8.8.8"
              ]
            },
            "hostAliases": [
              {
                "key": "64.23.172.139",
                "value": "foo.bar,foo2.bar"
              }
            ]
          },
          "initContainers": [
            {
              "name": "busybox",
              "image": "busybox",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "echo"
              ],
              "args": [
                "hello world"
              ]
            }
          ],
          "containers": [
            {
              "name": "nginx",
              "image": "nginx",
              "imagePullPolicy": "IfNotPresent",
              "privileged": true,
              "tty": true,
              "workingDir": "/test",
              "envs": [
                {
                  "key": "foo",
                  "value": "bar"
                }
              ],
              "startupProbe": {
                "enable": true,
                "type": "http",
                "httpGet": {
                  "scheme": "HTTP",
                  "host": "",
                  "path": "/",
                  "port": 80,
                  "httpHeaders": [
                    {
                      "key": "foo",
                      "value": "bar"
                    }
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5,
                "timeoutSeconds": 10,
                "successThreshold": 1,
                "failureThreshold": 10
              },
              "livenessProbe": {
                "enable": true,
                "type": "tcp",
                "tcpSocket": {
                  "host": "",
                  "port": 80
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5,
                "timeoutSeconds": 10,
                "successThreshold": 1,
                "failureThreshold": 10
              },
              "readinessProbe": {
                "enable": true,
                "type": "exec",
                "exec": {
                  "command": [
                    "echo",
                    "helloworld"
                  ]
                },
                "initialDelaySeconds": 10,
                "periodSeconds": 5,
                "timeoutSeconds": 10,
                "successThreshold": 1,
                "failureThreshold": 10
              },
              "resources": {
                "enable": true,
                "memRequest": 128,
                "memLimit": 128,
                "cpuRequest": 100,
                "cpuLimit": 100
              },
              "volumeMounts": [
                {
                  "mountName": "cache-volume",
                  "mountPath": "/test",
                  "readyOnly": false
                }
              ]
            }
          ]
        }
        ```
      parameters:
      - description: Pod Configuration
        in: body
        name: pod
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: update a Kubernetes pod
      tags:
      - pods
  /pods/{namespace}:
    get:
      consumes:
      - application/json
      description: get the pods list given a namespace, with optional keyword
      parameters:
      - description: Namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: Filter pods by keyword
        in: query
        name: keyword
        type: string
      - description: Filter pods by nodename
        in: query
        name: nodename
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get the pods list under a namespace
      tags:
      - pods
  /pods/namespacelist:
    get:
      consumes:
      - application/json
      description: get the namespace list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get the namespace list
      tags:
      - pods
  /pods/nodepods/{nodename}:
    get:
      consumes:
      - application/json
      description: get the pods list within a node, with optional keyword
      parameters:
      - description: Name of the node
        in: path
        name: nodename
        required: true
        type: string
      - description: Filter pods by keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get the pods list within a node
      tags:
      - pods
  /pods/poddetail/{namespace}:
    get:
      consumes:
      - application/json
      description: get a pod detail under a namespace
      parameters:
      - description: Namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: The name of the pod
        in: query
        name: keyword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get a pod detail
      tags:
      - pods
  /pv:
    delete:
      consumes:
      - application/json
      description: delete persistent volume
      parameters:
      - description: Delete the volume based on the name, required
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: delete persistent volume
      tags:
      - persistent volume
    get:
      consumes:
      - application/json
      description: get persistent volume list
      parameters:
      - description: Retrieve the volume list based on the keyword, not required
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get persistent volume list
      tags:
      - persistent volume
    post:
      consumes:
      - application/json
      description: "create a persistent volume, the request body should specify the
        detailed configs of \nthe persistent volume.\n\n\nan example:\n\n\n```json\n{\n
        \ \"name\": \"test\",\n  \"namespace\": \"test\",\n  \"labels\": [\n    {\n
        \     \"key\": \"pv\",\n      \"value\": \"test-pv\"\n    }\n  ],\n  \"capacity\":
        100,\n  \"accessModes\": [\n    \"ReadWriteOnce\"\n  ],\n  \"reClaimPolicy\":
        \"Recycle\",\n  \"volumeSource\": {\n    \"type\": \"nfs\",\n    \"nfsVolumeSource\":
        {\n      \"nfsPath\": \"\",\n      \"nfsServer\": \"\",\n      \"nfsReadyOnly\":
        false\n    }\n  }\n}\n```"
      parameters:
      - description: The configs of the persistent volume
        in: body
        name: PersistentVolume
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create persistent volume
      tags:
      - persistent volume
  /pv/pvc:
    delete:
      consumes:
      - application/json
      description: delete persistent volume claim
      parameters:
      - description: Delete the volume claim based on the namespace, required
        in: query
        name: namespace
        required: true
        type: string
      - description: Delete the volume claim based on the name, required
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: delete persistent volume claim
      tags:
      - persistent volume
    get:
      consumes:
      - application/json
      description: get persistent volume claim list
      parameters:
      - description: Retrieve the volume claim list based on the namespace, not required
        in: query
        name: namespace
        type: string
      - description: Retrieve the volume claim list based on the name, not required
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get persistent volume claim list
      tags:
      - persistent volume
    post:
      consumes:
      - application/json
      description: "create a persistent volume claim, the request body should specify
        the detailed configs of \nthe persistent volume claim. the requested capacity
        should be more than the target persistent volume capacity\n\n\nan example:\n\n\n```json\n{\n
        \ \"name\": \"test\",\n  \"namespace\": \"test\",\n  \"labels\": [\n    {\n
        \     \"key\": \"pvc\",\n      \"value\": \"pvc01\"\n    }\n  ],\n  \"selector\":
        [\n    {\n      \"key\": \"pv\",\n      \"value\": \"test-pv\"\n    }\n  ],\n
        \ \"accessModes\": [\n    \"ReadWriteOnce\"\n  ],\n  \"capacity\": 100\n}\n```"
      parameters:
      - description: The configs of the persistent volume claim
        in: body
        name: PersistentVolumeClaim
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create persistent volume claim
      tags:
      - persistent volume
  /pv/sc:
    delete:
      consumes:
      - application/json
      description: delete a storage class
      parameters:
      - description: Delete the storage class based on the name, required
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: delete a storage class
      tags:
      - persistent volume
    get:
      consumes:
      - application/json
      description: get storage class list
      parameters:
      - description: Retrieve the storage class list based on the keyword, not required
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get storage class list
      tags:
      - persistent volume
    post:
      consumes:
      - application/json
      description: "create a storage class, the request body should specify the detailed
        configs of\nthe storage class to be created. note that this project use nfs
        as the default provisioner. \nnfs supports two types of reclaim policy: Retain
        and Delete\n\n\nan example:\n\n```json\n{\n  \"name\": \"test\",\n  \"labels\":
        [],\n  \"provisioner\": \"cluster.local/nfs-subdir-external-provisioner\",\n
        \ \"mountOptions\": [\"nfsvers=4\"],\n  \"volumeBindingMode\": \"Immediate\",\n
        \ \"reclaimPolicy\": \"Delete\",\n  \"allowVolumeExpansion\": false,\n  \"parameters\":
        []\n}\n```"
      parameters:
      - description: The configs of the storage class to be created
        in: body
        name: StorageClass
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create storage class
      tags:
      - persistent volume
  /rbac/role:
    delete:
      consumes:
      - application/json
      description: delete a role
      parameters:
      - description: the namespace of the role to be deleted
        in: query
        name: namespace
        type: string
      - description: the name of the role to be deleted
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: delete a role
      tags:
      - rbac
    get:
      consumes:
      - application/json
      description: get role list
      parameters:
      - description: Retrieve the role list based on the namespace, not required
        in: query
        name: namespace
        type: string
      - description: Retrieve the role list based on the keyword, not required
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get role list
      tags:
      - rbac
    post:
      consumes:
      - application/json
      description: |-
        create a role. the configurations of the role should be specified in the request
        body. if the namespace is empty, a cluster role will be created

        an example of request body:

        ```json
        {
          "name": "test",
          "namespace": "test",
          "labels": [
            {
              "key": "role",
              "value": "test"
            }
          ],
          "rules": [
            {
              "apiGroups": [""],
              "verbs": ["get","list"],
              "resources": ["pods"],
              "resourceNames": ["web"],
              "nonResourceURLs": []
            }
          ]
        }
        ```
      parameters:
      - description: the configs of the role
        in: body
        name: ServiceAccount
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create role
      tags:
      - rbac
  /rbac/role/detail:
    get:
      consumes:
      - application/json
      description: get role detail
      parameters:
      - description: Retrieve the role detail based on the namespace
        in: query
        name: namespace
        type: string
      - description: Retrieve the role detail based on the name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get role detail
      tags:
      - rbac
  /rbac/serviceaccount:
    delete:
      consumes:
      - application/json
      description: delete a service account
      parameters:
      - description: the namespace of the service account to be deleted
        in: query
        name: namespace
        required: true
        type: string
      - description: the name of the service account to be deleted
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: delete a service account
      tags:
      - rbac
    get:
      consumes:
      - application/json
      description: get service account list
      parameters:
      - description: Retrieve the service account list based on the namespace, not
          required
        in: query
        name: namespace
        type: string
      - description: Retrieve the service account list based on the keyword, not required
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get service account list
      tags:
      - rbac
    post:
      consumes:
      - application/json
      description: |-
        create a service account. the configurations of the secret should be specified in the request
        body.

        an example of request body:

        ```json
        {
          "name": "test",
          "namespace": "test",
          "labels": [
            {
              "key": "sa",
              "value": "test"
            }
          ]
        }
        ```
      parameters:
      - description: the configs of the service account
        in: body
        name: ServiceAccount
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create service account
      tags:
      - rbac
  /secrets:
    delete:
      consumes:
      - application/json
      description: delete a secret
      parameters:
      - description: the namespace of the secret to be deleted
        in: query
        name: namespace
        required: true
        type: string
      - description: the name of the secret to be deleted
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: delete a secret
      tags:
      - secret
    get:
      consumes:
      - application/json
      description: get secret list
      parameters:
      - description: Retrieve the secret list based on the namespace, not required
        in: query
        name: namespace
        type: string
      - description: Retrieve the secret list based on the keyword, not required
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get secret list
      tags:
      - secret
    post:
      consumes:
      - application/json
      description: |-
        create/update a secret. the configurations of the secret should be specified in the request
        body.

        an example of request body:


        ```json
        {
          "name": "test",
          "namespace": "test",
          "type": "Opaque",
          "labels": [
            {
              "key": "cm",
              "value": "test"
            }
          ],
          "data": [
            {
              "key": "testKey",
              "value": "dGVzdFZhbHVl"
            }
          ]
        }
        ```
      parameters:
      - description: the configs of the secret
        in: body
        name: secret
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create/update secret
      tags:
      - secret
  /secrets/detail:
    get:
      consumes:
      - application/json
      description: get secret detail
      parameters:
      - description: Retrieve the secret detail based on the namespace
        in: query
        name: namespace
        required: true
        type: string
      - description: Retrieve the secret detail based on the name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get secret detail
      tags:
      - secret
  /workload/statefulset:
    delete:
      consumes:
      - application/json
      description: delete a statefulSet
      parameters:
      - description: the namespace of the statefulSet to be deleted
        in: query
        name: namespace
        required: true
        type: string
      - description: the name of the statefulSet to be deleted
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: delete a statefulSet
      tags:
      - workload
    get:
      consumes:
      - application/json
      description: get statefulSet list
      parameters:
      - description: Retrieve the statefulSet list based on the namespace, not required
        in: query
        name: namespace
        type: string
      - description: Retrieve the statefulSet list based on the keyword, not required
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get statefulSet list
      tags:
      - workload
    post:
      consumes:
      - application/json
      description: "create/update a statefulSet. the configs of the statefulSet should
        be specified \nin the request body. use the createService api to create a
        service first.\n\nan example:\n```json\n\n{\n    \"name\": \"nginx-statefulset\",\n
        \   \"namespace\": \"test\",\n    \"labels\": [\n      {\n        \"key\":
        \"app\",\n        \"value\": \"nginx-statefulset\"\n      }\n    ],\n    \"selector\":
        [\n      {\n        \"key\": \"app\",\n        \"value\": \"nginx-statefulset-tp\"\n
        \     }\n    ],\n    \"replicas\": 2,\n    \"volumeClaimTemplates\": [\n      {\n
        \       \"name\": \"www\",\n        \"labels\": [\n          {\n            \"key\":
        \"pvc\",\n            \"value\": \"pvc01\"\n          }\n        ],\n        \"accessModes\":
        [\n          \"ReadWriteOnce\"\n        ],\n        \"capacity\": 100,\n        \"storageClassName\":
        \"nfs-client\"\n      }\n    ],\n  \"template\": {\n    \"netWorking\": {\n
        \     \"hostNetwork\": true,\n      \"hostName\": \"test\",\n      \"dnsPolicy\":
        \"Default\",\n      \"dnsConfig\": {\n        \"nameservers\": [\n          \"8.8.8.8\"\n
        \       ]\n      },\n      \"hostAliases\": [\n        {\n          \"key\":
        \"64.23.172.139\",\n          \"value\": \"foo.bar,foo2.bar\"\n        }\n
        \     ]\n    },\n    \"base\": {\n      \"labels\": [\n        {\n          \"key\":
        \"app\",\n          \"value\": \"nginx-statefulset-tp\"\n        }\n      ],\n
        \     \"restartPolicy\": \"Always\"\n    },\n    \"initContainers\": [\n      {\n
        \       \"name\": \"busybox-init\",\n        \"image\": \"busybox\",\n        \"imagePullPolicy\":
        \"IfNotPresent\",\n        \"command\": [\n          \"echo\"\n        ],\n
        \       \"args\": [\n          \"hello world\"\n        ]\n      }\n    ],\n
        \   \"containers\": [\n      {\n        \"name\": \"nginx\",\n        \"image\":
        \"nginx\",\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"livenessProbe\":
        {\n          \"enable\": true,\n          \"type\": \"tcp\",\n          \"tcpSocket\":
        {\n            \"host\": \"\",\n            \"port\": 80\n          },\n          \"initialDelaySeconds\":
        10,\n          \"periodSeconds\": 5,\n          \"timeoutSeconds\": 10,\n
        \         \"successThreshold\": 1,\n          \"failureThreshold\": 10\n        },\n
        \       \"envs\": [\n          {\n            \"name\": \"foo\",\n            \"value\":
        \"bar\"\n          }\n        ],\n        \"volumeMounts\": [\n          {\n
        \           \"mountName\": \"www\",\n            \"mountPath\": \"/usr/share/nginx/html\",\n
        \           \"readOnly\": false\n          }\n        ]\n      },\n      {\n
        \       \"name\": \"busybox\",\n        \"image\": \"busybox\",\n        \"imagePullPolicy\":
        \"IfNotPresent\",\n        \"tty\": true\n      }\n    ]\n  }\n}\n```"
      parameters:
      - description: the configs of the statefulSet
        in: body
        name: statefulSet
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create/update statefulSet
      tags:
      - workload
  /workload/statefulset/detail:
    get:
      consumes:
      - application/json
      description: get statefulset detail
      parameters:
      - description: Retrieve the statefulset detail based on the namespace
        in: query
        name: namespace
        required: true
        type: string
      - description: Retrieve the statefulset detail based on the name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get statefulset detail
      tags:
      - workload
swagger: "2.0"
